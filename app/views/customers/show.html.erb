<div class="container">      
<h3>Customer's Detail</h3>
    <div class="form-group">
      <label style="width:125px"><strong>Name:</strong> </label>
      <%= @customer.name %>
    </div>
    <div class="form-group">
      <label style="width:125px"><strong>Email:</strong> </label>
      <%= @customer.email %>
    </div>

    <br>
    <hr/>
    <h3>Customer Budget</h3>
    <%= form_for @customer, url: update_line_items_customer_url, data: { line_item_list: show_line_items_customer_url(@customer) }, class: 'customer_listing', method: :post do |f| %>
      <table id="budgetTable" class="table table-bordered">
        <thead>
          <tr>
            <th class='w-25'>Budget Cost</th>
            <th>Budget Type</th>
            <th class='w-25'><button id="addRow" type="button" class="btn btn-sm btn-dark"> + Add Row</button> </th>
          </tr>
        </thead>
        <tbody>

        </tbody>
      </table>
      <div style="margin-top:10px" class='float-right'>
         <%= link_to 'Back', { controller: 'customers', action: 'index'}, class:"btn btn-sm btn-primary" %>
         <%= f.submit 'Save', class:"btn btn-sm btn-success" %>
       </div>       
   <% end %>


<div>
</div>
</div>
<script type="text/javascript">



/**
 * App operations
 *
 * @author Furqan Wasi<furqan.wasi66@gmail.com>
 *
 * Apps  Handler
 *
 *
 * @returns {App}
 *
 */
var selfApp;

function App() {
    
    'use strict';

    selfApp = this;
    /**
     *
     * @returns {object}
     */
    this.getDefaultData = function () {
        return selfApp.defaultData;
    };

    /**
     * Class Action
     *
     * @param {string} url
     * @param {object} requestData
     * @param {string} responseType
     * @param {string} requestType
     * @param {string} containerToBeaffected
     * @param {object} caller
     *
     * @returns {boolean}
     */
    this.classAction = function (url, requestData, responseType, requestType, containerToBeaffected, caller, show_loader) {
        if (typeof show_loader == 'undefined') {
            show_loader = true;
        }
    
        if (show_loader) {
            selfApp.show_loader();
            selfApp.show_loader_text();
        }
        let object_ajax = $.ajax({
            url: url,
            data: requestData,
            error: function (response) {
                console.log(requestData.action + ':: Problem ' + requestData);
                selfApp.actionBasedMethodExc(response, containerToBeaffected, caller, requestData);
                selfApp.hide_loader();
            },
            dataType: responseType,
            success: function (response) {
                if (show_loader) {
                    selfApp.hide_loader();
                }
                selfApp.actionBasedMethodExc(response, containerToBeaffected, caller, requestData);
            },
            type: requestType
        });
        return object_ajax;
    };

    /**
     *
     * @param {object} defaultData
     *
     * @returns {none}
     */
    this.setDefaultData = function (defaultData) {
        selfApp.defaultData = defaultData;
    };


    /**
     *
     * @returns {none}
     */
    this.show_loader = function () {
        $('.loadingCus').show();
        this.show_loader_text();

    };

    /**
     *
     * @returns {none}
     */
    this.hide_loader = function () {
        $('.loadingCus').hide();
        this.hide_loader_text();
    }
    ;


    this.email_validator = function (email) {
        var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
        return regex.test(email);
    };

    /**
     *
     * @returns {none}
     */
    this.show_loader_text = function () {
        $('.loadingtextCus').show();
    };

    /**
     * Remove Param
     * 
     * @param {string} key param to be removed
     * @param {string} sourceURL target url 
     * 
     * @returns {string}
     */
    this.removeParam = function(key, sourceURL) {
        var rtn = sourceURL.split("?")[0],
            param,
            params_arr = [],
            queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
        if (queryString !== "") {
            params_arr = queryString.split("&");
            for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                param = params_arr[i].split("=")[0];
                if (param === key) {
                    params_arr.splice(i, 1);
                }
            }
            rtn = rtn + "?" + params_arr.join("&");
        }
        return rtn;
    }

    /**
     *
     * @returns {none}
     */
    this.hide_loader_text = function () {
        $('.loadingtextCus').text('');
        $('.loadingtextCus').hide();
    };


    /**
     *
     * @param {sting} heading
     * @param {sting} message
     * @param {sting} type
     */
    this.show_modal_message = function (heading, message, type, script) {
        if (type == 'danger') {
            message = '<span class="text-danger"> ' + message + ' </span>';
        } else if (type == 'info') {
            message = '<span > ' + message + ' </span>';
        } else {
            message = '<span class="text-success"> ' + message + '</span>';
        }
        $('#general_modal_title_cust').html('<strong><center>' + heading + '</center></strong>');
        $('.general_modal_body_cust').html('<b><center>' + message + '</center></b>');
        if (typeof script != 'undefined' && script != '') {
            $('#general_modal_close_cust').attr('onclick', script);
        } else {
            $('#general_modal_close_cust').attr('onclick', 'void(0)');
        }
        $('#general_modal_message_cust').modal('show');

    };

    /**
     *
     * @param response
     * @param container
     * @param requestData
     */
    this.handlecallback = function (response, container, requestData) {
        var functionName = requestData.action;
        try {
            eval('selfApp.' + functionName + '(response,container)');
        } catch (err) {
            console.log('class error', err);
            try {
                this.callback_child(response, container, requestData);
            } catch (err) {
                console.log('class error', err);
            }
        }
    };

    /**
     * Action Based Method Exc.
     *
     * @param {string} action
     * @param {string} response
     * @param {string} container
     * @param {string} caller
     *
     * @returns {none}
     */
    this.actionBasedMethodExc = function (response, container, caller, requestData) {
        try {
            caller.handlecallback(response, container, requestData, caller);
        } catch (err) {
            console.log('class error', err, caller);
        }

    };

}





  /**
 * Customer operations
 *
 * @author Furqan Wasi<furqan.wasi66@gmail.com>
 *
 * Customer  Handler
 *
 *
 * @returns {Customer}
 *
 */
var that;

function Customer() {
    
    
    that = this;
    that.app_obj = {};

    /**
     *
     * @param app_obj
     */
    this.initialize = function(app_obj) {
        this.app_obj = app_obj;
        fetch_customer_items();
        bindings();
    };

    /**
     *  bindings all methods
     */
    const bindings = function() {
        add_more_items();
        category_change();
    };

    /**
     *  add_more_items
     */
    const add_more_items = function() {
      $('#addRow').on('click', function(){
        console.log("button clicked");
        let rowCount = $("input[type='number']").length;
        add_list_item(rowCount)
      });
    };


    /**
     *  fetch_customer_items
     */
    const fetch_customer_items = function() {
        let data = {
          action: 'fetch_customer_items'
        };
        that.app_obj.classAction($('.edit_customer').data('line-item-list'), data, 'JSON', 'GET', '', that, true);
    };

    /**
     *
     * @param response
     */
    this.fetch_customer_items = function(response) {
        $('#budgetTable tbody').html("");
        if (response != null) {
            $.each(response, function(key, single_item) {
                add_list_item(single_item.budget, single_item.cost, single_item.other)
            });
        } else {
            $('#budgetTable tbody').append('<tr class="empty_row"> <td colspan="2"> No Records Found!</td></tr>');
        }
    };

    /**
     * category_change
     */
    const category_change = function(){

        $(document).on('change', ".budgetType", function () {
            if(this.value == 'Other'){
                $(this).closest('td').find('input').css("display", "block");
                $('.show_hide').show();
            } else {
                $(this).closest('td').find('input').css("display", "none");
            }
        });

    };

    /**
     *
     * @param budget
     * @param cost
     * @param other
     */
    const add_list_item = function(budget = '', cost = '', other = '' ){
        $('.empty_row').remove();
        let row_count = $(".customers_cost").length;
        var addElement = "<tr>"
                    +"<td><input required='true' class='form-control p-2 customers_cost' type='number' placeholder='Cost' name='customer[line_item][" + row_count + "][cost]' id='customer_line_item_" + row_count + "_cost' value='" + cost + "'/></td>"
                    +"<td><select class='form-control budgetType ' name='customer[line_item][" + row_count + "][budget]' id='customer_line_item_" + row_count + "_budget'>"
                    +"<option " + (budget == 'Direct Mail' ? 'selected="selected"' : '') + " value='Direct Mail'>Direct Mail</option>"
                    +"<option " + (budget == 'Skip Tracing' ? 'selected="selected"' : '') + " value='Skip Tracing'>Skip Tracing</option>"
                    +"<option " + (budget == 'Other' ? 'selected="selected"' : '') +" value='Other'>Other</option>"
                    +"</select> <div class='show_hide w-100 mt-2'><input class='form-control w-100 ' placeholder='Other Category' style='" + (budget == 'Other' ? '' : 'display:none;') +"' type='text' name='customer[line_item][" + row_count + "][other]' id='customer_line_item_" + row_count + "_other' value='" + other + "'/></div></td>"
                    +"<td><input type='button' value='Remove' class='btn btn-sm btn-danger' onclick=\"removeRow(this)\"/></td>"
                    +"</tr>";
        $('#budgetTable tbody').append(addElement);

    };

    /**
     *
     * @param response
     * @param container
     * @param requestData
     */
    this.handlecallback = function (response, container, requestData) {
        try {
            eval('this.' + requestData.action + '(response,container,requestData)');
        } catch (err) {
            console.log(err);
        }
    };
}

$(function(){
    let customer = new Customer();
    customer.initialize(new App());
});

function removeRow(selectObject) {
    selectObject.closest("tr").remove();
    if($(".customers_cost").length <= 0) {
        $('#budgetTable tbody').append('<tr class="empty_row"> <td colspan="2"> No Records Found!</td></tr>');
    }
};
 </script>
